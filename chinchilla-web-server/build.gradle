plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.7'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'
description = 'chinchilla_teststset'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Docker Compose tasks
tasks.register('dockerComposeUp', Exec) {
    group = 'docker'
    description = 'Start Docker Compose services'
    commandLine 'docker', 'compose', 'up', '-d'

    doFirst {
        println 'üê≥ Starting Docker Compose services...'
    }

    doLast {
        println '‚úÖ Docker Compose services started'
        println '‚è≥ Waiting for MySQL to be ready...'
        sleep(3000) // Wait 5 seconds for MySQL to initialize
    }
}

tasks.register('dockerComposeDown', Exec) {
    group = 'docker'
    description = 'Stop Docker Compose services'
    commandLine 'docker', 'compose', 'down'

    doFirst {
        println 'üõë Stopping Docker Compose services...'
    }

    doLast {
        println '‚úÖ Docker Compose services stopped'
    }
}

tasks.register('dockerComposeStatus', Exec) {
    group = 'docker'
    description = 'Check Docker Compose services status'
    commandLine 'docker', 'compose', 'ps'
}

// Make bootRun depend on dockerComposeUp
tasks.named('bootRun') {
    dependsOn 'dockerComposeUp'
}
